{"version":3,"sources":["logo.svg","firebase/firebase-utils.js","context/todos.context.jsx","components/header.component.jsx","components/todo-item.component.jsx","components/todo-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","todosCollection","collection","TodosContext","createContext","todos","todoCount","completedTodoCount","loading","toggleTodo","addTodo","removeTodo","clearTodos","TodosProvider","children","useState","setLoading","setTodos","setTodoCount","setCompletedTodoCount","useEffect","onSnapshot","snapshot","newTodos","forEach","doc","push","id","data","length","filter","todo","checked","Provider","value","find","set","title","add","delete","batch","commit","Container","styled","div","Header","React","useContext","Checkbox","props","TodoItem","onCheckboxToggle","onRemoveTodo","onClick","ButtonFloatRight","button","TodoList","inputText","setInputText","handleOnCheckboxToggle","handleRemoveTodo","map","key","type","onChange","e","target","ContainerBody","ContainerApp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97e54e3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyD4_tvbrmIfUpkEu97g14l7Z4-ybSj5X1I\",\n    authDomain: \"todo-test-bec8a.firebaseapp.com\",\n    databaseURL: \"https://todo-test-bec8a.firebaseio.com\",\n    projectId: \"todo-test-bec8a\",\n    storageBucket: \"todo-test-bec8a.appspot.com\",\n    messagingSenderId: \"483343130388\",\n    appId: \"1:483343130388:web:4cc8315b96e3bf1dbaec01\"\n  })\n\n  export const firestore = firebase.firestore()","import React, { createContext, useEffect, useState, useReducer } from 'react'\nimport { firestore } from '../firebase/firebase-utils'\n\nconst INITIAL_TODOS_STATE = {\n    todos: [],\n    todoCount: 0,\n    completedTodoCount: 0,\n    loading: true,\n    toggleTodo: () => {},\n    addTodo: () => {},\n    removeTodo: () => {},\n    clearTodos: () => {}\n}\n\nconst todosCollection = firestore.collection('todos')\n\nexport const TodosContext = createContext(INITIAL_TODOS_STATE)\n\nexport const TodosProvider = ({ children }) => {\n    const [loading, setLoading] = useState(true)\n    const [todos, setTodos] = useState([])\n    const [todoCount, setTodoCount] = useState(0)\n    const [completedTodoCount, setCompletedTodoCount] = useState(0)\n\n    const toggleTodo = (id) => {\n        const todo = todos.find(todo => todo.id == id)\n\n        todosCollection.doc(id).set({\n            title: todo.title,\n            checked: !todo.checked,\n            id\n        })\n    }\n\n    const addTodo = (title) => {\n        todosCollection.add({\n            title: title,\n            checked: false\n        })\n    }\n\n    const removeTodo = (id) => {\n        todosCollection.doc(id).delete()\n    }\n\n    const clearTodos = () => {\n        const batch = firestore.batch()\n        todos.filter(todo => todo.checked).forEach(todo => {\n            const doc = todosCollection.doc(todo.id)\n            batch.delete(doc)\n        })\n        batch.commit()\n    }\n\n    useEffect(() => {\n        const listener = todosCollection.onSnapshot(snapshot => {\n            var newTodos = []\n            snapshot.forEach(doc => newTodos.push({id: doc.id, ...doc.data()}))\n            setTodos(newTodos)\n            setLoading(false)\n        })\n\n        return listener\n    }, [])\n\n    useEffect(() => {\n        setTodoCount(todos.length)\n        setCompletedTodoCount(todos.filter(todo => todo.checked).length)\n    }, [todos])\n\n    return (\n        <TodosContext.Provider value={{\n            todos,\n            todoCount,\n            completedTodoCount,\n            loading,\n            toggleTodo,\n            addTodo,\n            removeTodo,\n            clearTodos\n        }}>\n            {children}\n        </TodosContext.Provider>\n    )\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport { TodosContext } from '../context/todos.context'\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 20px;\n    background-color: grey;\n`\n\nconst Header = () => {\n    const { todoCount, completedTodoCount } = React.useContext(TodosContext)\n\n    return (\n        <Container>\n            <h1>Todos</h1>\n            <h3>{completedTodoCount} / {todoCount} completed</h3>\n        </Container>\n    )\n}\n\nexport default Header","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    display: flex;\n    align-items: center;\n    &>* {\n        margin-right: 10px;\n    }\n`\n\nconst Checkbox = styled.div`\n    border: 1px solid black;\n    width: 20px;\n    height: 20px;\n    background-color: ${props => props.checked ? 'green' : 'white'}\n`\n\nconst TodoItem = ({todo, onCheckboxToggle, onRemoveTodo}) => {\n    const {title, checked, id} = todo\n    return (\n        <Container>\n            <Checkbox checked={checked} onClick={() => onCheckboxToggle(id)} />\n            <p>{title}</p>\n            <button onClick={() => onRemoveTodo(id)}>X</button>\n        </Container>\n    )\n}\n\nexport default TodoItem","import React from 'react'\nimport styled from 'styled-components'\n\nimport { TodosContext } from '../context/todos.context'\n\nimport TodoItem from './todo-item.component'\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 20px;\n`\n\nconst ButtonFloatRight = styled.button`\n    float: right;\n`\n\nconst TodoList = () => {\n    const { \n        todos,\n        loading,\n        addTodo,\n        removeTodo,\n        toggleTodo,\n        clearTodos\n    } = React.useContext(TodosContext)\n    const [inputText, setInputText] = React.useState('')\n\n    const handleTextChange = (e) => {\n        setInputText(e.target.value)\n    }\n\n    const handleAddTodo = () => {\n        if (inputText != '') {\n            addTodo(inputText)\n        }\n        setInputText('')\n    }\n\n    const handleOnCheckboxToggle = (id) => {\n        toggleTodo(id)\n    }\n\n    const handleRemoveTodo = (id) => {\n        removeTodo(id)\n    }\n\n    const handleClearCompletedTodos = () => {\n        clearTodos()\n    }\n\n    return (\n        <Container>\n            {loading ? <p>Loading...</p> :\n            <>\n                {todos.length == 0 ? <p>You have no todos today. Add one!</p> : <h3>Todos for today</h3>}\n                <div>\n                    {todos.map(todo =>\n                        <TodoItem\n                            todo={todo}\n                            onCheckboxToggle={handleOnCheckboxToggle}\n                            onRemoveTodo={handleRemoveTodo}\n                            key={todo.id}\n                        />\n                    )}\n                </div>\n                <div>\n                    <input type='text' value={inputText} onChange={handleTextChange} />\n                    <button onClick={handleAddTodo}>Add</button>\n                    <ButtonFloatRight onClick={handleClearCompletedTodos}>Clear all</ButtonFloatRight>\n                </div>\n            </>\n            }\n        </Container>\n    )\n}\n\nexport default TodoList","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport styled from 'styled-components'\n\nimport Header from './components/header.component'\nimport TodoList from './components/todo-list.component'\n\nconst ContainerBody = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst ContainerApp = styled.div`\n  width: 100vw;\n  max-width: 50rem;\n  height: 100vh;\n  border: 1px solid grey;\n`\n\nfunction App() {\n  return (\n    <ContainerBody>\n      <ContainerApp>\n        <Header />\n        <TodoList />\n      </ContainerApp>\n    </ContainerBody>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { TodosProvider } from './context/todos.context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodosProvider>\n      <App />\n    </TodosProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}